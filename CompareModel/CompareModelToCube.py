import numpy as np

import astropy
from astropy.io import fits
from astropy import units as u
from astropy import wcs
import os

"""
    This file contains routines for comparing some tilted ring model to the underlying data through the use of the MCGSuite programs. It contains routines
    ComparisionFncs --> Holds a dictionary of functions that may be used in other routines without directly importing this module.
    CompareGeneralTiltedRingModel --> Generates a mock cube from a tilted ring model and compares it to some target cube.
    BasicCubeCompare --> Calculates a reduced chi^2 comparison between two cubes.
"""


def ComparisonFncs():
    """
        This function places other functions in this module into a dictionary for passing to other modules without directly importing this module.
    """
    ComparisonDict={'CompareGeneralTiltedRingModel':CompareGeneralTiltedRingModel}
    return ComparisonDict


def CompareGeneralTiltedRingModel(Params,TargetCube,MCGFncs):
    """
        This function takes in a tilted ring model as the Params dictionary as well as some target data cube.  It generates an MCG realization of the model at the same resolution as the target cube.  Then it compares the mock cube to the target cube.
    """
    #   First generate an MCG model from the cube and parameters
        #   The first step of this is to get the general MCG definitions
    MCGDict=MCGFncs['MCG_Defs']("TempCube")
        #   Now make the MCG model using the Tilted Ring model and target cube header
    MCGFncs['MakeMCGModel'](MCGDict,Params,TargetCube['CubeHeader'])
    #   Then load in the MCG cube that has been generated by the MCG program
    MCGCube=fits.open(MCGDict['CubeFile'])
    #   Place the MCG data into one variable
    MCGCubeData=MCGCube[0].data
    #   Place the header in another variable
    MCGCCubeHeader=MCGCube[0].header
    #   Close the MCG cube
    MCGCube.close()
    #   Store the MCG realization in a dictionary
    MCGRealization={'CubeData':MCGCubeData,'CubeHeader':MCGCCubeHeader}
    #   When done with the temporary MCG cube, remove it
    CleanCmd="rm -r "+MCGDict['OutputName']
    os.system(CleanCmd)
    #   Compare the MCG realization to the target cube
    MCGRealization,Params['CHI2'],Params['RESID']=BasicCubeCompare(TargetCube,MCGRealization)
    #   Keep the MCG model as a part of the TR model dictionary in case it's needed elsewhere
    Params['MCGModel']=MCGRealization
    return Params

def BasicCubeCompare(TargetCube,ModelCube):
    """
        This function gets a reduced chi^2 comparison between two cubes.
    """
    #   This comparison uses the SoFiA cube mask and the noise
    #       First mask the model cube using the cube mask
    ModelCube['MaskedCube']=ModelCube['CubeData']*TargetCube['Mask']
    #   Now calculate a residual array
    ResidData=(TargetCube['MaskedCube']-ModelCube['MaskedCube'])**2./TargetCube['Noise']**2.
    #   Get the total residual
    ResidTot=np.nansum(ResidData)
    #   Get the number of cells in the comparison
    nCells=np.nansum(TargetCube['Mask'])
    #   Calculate the reduced chi^2
    reducedChi2=ResidTot/nCells
    return ModelCube,reducedChi2,ResidTot
